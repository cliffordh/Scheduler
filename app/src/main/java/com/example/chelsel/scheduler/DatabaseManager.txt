package com.example.chelsel.scheduler;

import android.database.sqlite.SQLiteOpenHelper;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.content.ContentValues;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.text.SimpleDateFormat;
import java.util.Locale;
import android.util.Log;
import android.database.Cursor;

/**
 * Created by chelsel on 3/8/18.
 * https://www.androidhive.info/2013/09/android-sqlite-database-with-multiple-tables/
 */

public class DatabaseManager extends SQLiteOpenHelper {
    // Database Name
    private static final String DATABASE_NAME = "scheduleManager";

    // Database Version
    private static final int DATABASE_VERSION = 1;

    // Log settings
    private static final String LOG = "DatabaseManager";

    // Common column names
    private static final String KEY_ID = "id";
    private static final String KEY_CREATED_AT = "created_at";

    // Table Names
    private static final String TABLE_TERMS = "terms";
    private static final String TABLE_TERMS_COURSES = "terms_courses";
    private static final String TABLE_COURSES = "courses";
    private static final String TABLE_COURSES_MENTORS = "courses_mentors";
    private static final String TABLE_MENTORS = "mentors";
    private static final String TABLE_COURSES_ASSESSMENTS = "courses_assessments";
    private static final String TABLE_ASSESSMENTS = "assessments";

    // Mentor Table - column names
    private static final String KEY_NAME = "name";
    private static final String KEY_PHONE = "phone";
    private static final String KEY_EMAIL = "email";
    private static final String KEY_TITLE = "title";
    private static final String KEY_STARTDATE = "startDate";
    private static final String KEY_ENDDATE = "endDate";
    private static final String KEY_GOALDATE = "goalDate";
    private static final String KEY_TERMID = "termId";
    private static final String KEY_COURSEID = "courseId";
    private static final String KEY_STATUS = "status";
    private static final String KEY_NOTES = "notes";
    private static final String KEY_MENTORID = "mentorId";
    private static final String KEY_ASSESSMENTID = "assessmentId";
    private static final String KEY_STARTALERT = "startAlert";
    private static final String KEY_ENDALERT = "endAlert";
    private static final String KEY_GOALALERT = "goalAlert";

    // Table Create Statements
    private static final String CREATE_TABLE_TERMS = "CREATE TABLE "
            + TABLE_TERMS + "(" + KEY_ID + " INTEGER PRIMARY KEY," + KEY_TITLE
            + " TEXT," + KEY_STARTDATE + " DATETIME," + KEY_ENDDATE+" DATETIME," + KEY_CREATED_AT
            + " DATETIME" + ")";
    private static final String CREATE_TABLE_TERMS_COURSES = "CREATE TABLE "
            + TABLE_TERMS_COURSES + "(" + KEY_ID + " INTEGER PRIMARY KEY,"
            + KEY_TERMID + " INTEGER," + KEY_COURSEID + "INTEGER, "
            + KEY_CREATED_AT + " DATETIME" + ")";
    private static final String CREATE_TABLE_COURSES = "CREATE TABLE "
            + TABLE_COURSES + "(" + KEY_ID + " INTEGER PRIMARY KEY," + KEY_TITLE
            + " TEXT," + KEY_STARTDATE + " DATETIME," + KEY_ENDDATE+" DATETIME, "
            + KEY_STATUS +" TEXT," + KEY_NOTES +" TEXT,"
            + KEY_CREATED_AT + " DATETIME" + ")";
    private static final String CREATE_TABLE_COURSES_MENTORS = "CREATE TABLE "
            + TABLE_COURSES_MENTORS + "(" + KEY_ID + " INTEGER PRIMARY KEY,"
            + KEY_COURSEID + " INTEGER," + KEY_MENTORID + "INTEGER, "
            + KEY_CREATED_AT + " DATETIME" + ")";
    private static final String CREATE_TABLE_MENTORS = "CREATE TABLE "
            + TABLE_MENTORS + "(" + KEY_ID + " INTEGER PRIMARY KEY," + KEY_NAME
            + " TEXT," + KEY_PHONE + " TEXT," + KEY_EMAIL+" TEXT," + KEY_CREATED_AT
            + " DATETIME" + ")";
    private static final String CREATE_TABLE_ASSESSMENTS = "CREATE TABLE "
            + TABLE_ASSESSMENTS + "(" + KEY_ID + " INTEGER PRIMARY KEY," + KEY_TITLE
            + " TEXT," + KEY_STARTDATE + " DATETIME," + KEY_ENDDATE+" DATETIME,"
            + KEY_STATUS +" TEXT," + KEY_GOALDATE +" DATETIME,"
            + KEY_STARTALERT +" BOOLEAN," + KEY_ENDALERT +" BOOLEAN," + KEY_GOALALERT + " BOOLEAN,"
            + KEY_CREATED_AT + " DATETIME" + ")";
    private static final String CREATE_TABLE_COURSES_ASSESSMENTS = "CREATE TABLE "
            + TABLE_COURSES_ASSESSMENTS + "(" + KEY_ID + " INTEGER PRIMARY KEY,"
            + KEY_COURSEID + " INTEGER," + KEY_ASSESSMENTID + "INTEGER, "
            + KEY_CREATED_AT + " DATETIME" + ")";

    public DatabaseManager(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        // creating required tables
        db.execSQL(CREATE_TABLE_MENTORS);
        db.execSQL(CREATE_TABLE_COURSES);
        db.execSQL(CREATE_TABLE_TERMS);
        db.execSQL(CREATE_TABLE_ASSESSMENTS);
        db.execSQL(CREATE_TABLE_COURSES_MENTORS);
        db.execSQL(CREATE_TABLE_COURSES_ASSESSMENTS);
        db.execSQL(CREATE_TABLE_TERMS_COURSES);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // on upgrade drop older tables
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_TERMS_COURSES);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_COURSES_ASSESSMENTS);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_COURSES_MENTORS);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_MENTORS);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_COURSES);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_TERMS);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_ASSESSMENTS);

        // create new tables
        onCreate(db);
    }

    /**
     * get datetime
     * */
    private String getDateTime() {
        SimpleDateFormat dateFormat = new SimpleDateFormat(
                "yyyy-MM-dd HH:mm:ss", Locale.getDefault());
        Date date = new Date();
        return dateFormat.format(date);
    }

    // closing database
    public void closeDB() {
        SQLiteDatabase db = this.getReadableDatabase();
        if (db != null && db.isOpen())
            db.close();
    }

    /*
     * Creating mentor
     */
    public long createMentor(Mentor mentor) {
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_NAME, mentor.getName());
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long tag_id = db.insert(TABLE_MENTORS, null, values);

        return tag_id;
    }

    /**
     * getting all tags
     * */
    public List<Mentor> getAllMentors() {
        List<Mentor> tags = new ArrayList<Mentor>();
        String selectQuery = "SELECT  * FROM " + TABLE_MENTORS;

        Log.e(LOG, selectQuery);

        SQLiteDatabase db = this.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        if (c.moveToFirst()) {
            do {
                Mentor t = new Mentor();
                t.setId(c.getInt((c.getColumnIndex(KEY_ID))));
                t.setName(c.getString(c.getColumnIndex(KEY_NAME)));

                // adding to tags list
                tags.add(t);
            } while (c.moveToNext());
        }
        return tags;
    }

    public Cursor mentorsAll() {
        SQLiteDatabase db = this.getReadableDatabase();
        String[] columns = new String[]{KEY_ID, KEY_NAME};
        Cursor cursor = db.query(TABLE_MENTORS,columns,null,null,null,null,null);
        return cursor;
    }


}
